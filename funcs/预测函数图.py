from scipy.optimize import curve_fit
import numpy as np
import matplotlib.pyplot as plt
import matplotlib

# datas = [{'编码': '10020', '地域': '徐州', '级别1': '人口劳动力', '级别2': '全市常住人口数', '级别3': '常住人口', '级别4': '常住人口', '级别5': '合计', '级别6': '全市', '2010': 0.0, '2011': 0.0, '2012': 0.0, '2013': 0.0, '2014': 0.0, '2015': 0.0, '2016': 0.0, '2017': 0.0, '2018': 0.0, '2019': 0.0},    {'编码': '10030', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍户数、人口数', '级别3': '总人口', '级别4': '总人口', '级别5': '合计', '级别6': '全市', '2010': 868.19, '2011': 858.21, '2012': 857.26, '2013': 856.41, '2014': 859.1, '2015': 862.83, '2016': 866.9, '2017': 871.0, '2018': 876.35, '2019': 880.2},    {'编码': '10040', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍户数、人口数', '级别3': '总人口', '级别4': '男', '级别5': '男', '级别6': '全市', '2010': 436.7, '2011': 431.68, '2012': 431.202, '2013': 429.918, '2014': 432.127, '2015': 434.003, '2016': 436.918, '2017': 438.984, '2018': 441.68, '2019': 442.74},    {'编码': '10050', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍户数、人口数', '级别3': '总人口', '级别4': '女', '级别5': '女', '级别6': '全市', '2010': 431.49, '2011': 426.53, '2012': 426.058, '2013': 426.492, '2014': 426.973, '2015': 428.827, '2016': 429.982, '2017': 432.016, '2018': 434.67, '2019': 437.46},    {'编码': '10060', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍户数、人口数', '级别3': '总户数', '级别4': '总户数', '级 别5': '总户数', '级别6': '全市', '2010': 273.877, '2011': 264.88, '2012': 267.894, '2013': 271.016, '2014': 271.009, '2015': 271.33, '2016': 270.906, '2017': 271.34, '2018': 272.16, '2019': 275.08},    {'编码': '10070', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍户数、人口数', '级别3': '平均每户人口', '级别4': '平均每户人口', '级别5': '平均每户人口', '级别6': '全市', '2010': 3.17, '2011': 3.24, '2012': 3.2, '2013': 3.16, '2014': 3.17, '2015': 3.18, '2016': 3.2, '2017': 3.21, '2018': 3.22, '2019': 3.2},    {'编码': '10080', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '年末户籍 户数、人口数', '级别3': '人口密度', '级别4': '人口密度', '级别5': '人口密度', '级别6': '全市', '2010': 737.95, '2011': 729.467, '2012': 728.66, '2013': 727.937, '2014': 730.224, '2015': 733.394, '2016': 736.853, '2017': 740.338, '2018': 744.886, '2019': 748.158},    {'编码': '10090', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '出生人数', '级别4': '出生人数', '级别5': '全市', '级别6': '全市', '2010': 182950.0, '2011': 217399.0, '2012': 177663.0, '2013': 193812.0, '2014': 211582.0, '2015': 205463.0, '2016': 151956.0, '2017': 184364.0, '2018': 161550.0, '2019': 139514.0},    {'编码': '10100', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '出生率', '级别4': '出生率', '级别5': '全市', '级别6': '全市', '2010': 19.21, '2011': 22.52, '2012': 18.23, '2013': 19.71, '2014': 21.19, '2015': 20.24, '2016': 14.81, '2017': 17.81, '2018': 15.53, '2019': 13.39},    {'编码': '10110', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '死亡人数', '级别4': '死亡人数', '级别5': '全市', '级别6': '全市', '2010': 68358.0, '2011': 79390.0, '2012': 71598.0, '2013': 45778.0, '2014': 33430.0, '2015': 30120.0, '2016': 59174.0, '2017': 39293.0, '2018': 146280.0, '2019': 53436.0},    {'编码': '10120', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '死亡率', ' 级别4': '死亡率', '级别5': '全市', '级别6': '全市', '2010': 7.18, '2011': 8.22, '2012': 7.35, '2013': 4.65, '2014': 3.35, '2015': 2.97, '2016': 5.77, '2017': 3.8, '2018': 14.06, '2019': 5.13},    {'编码': '10130', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '自然增长人数', '级别4': '自然增长人数', '级别5': '全市', '级别6': '全市', '2010': 114592.0, '2011': 138009.0, '2012': 106065.0, '2013': 148045.0, '2014': 178152.0, '2015': 175343.0, '2016': 92782.0, '2017': 145071.0, '2018': 15270.0, '2019': 86078.0},    {'编码': '10140', '地域': '徐州', '级别1': '人 口 劳动力', '级别2': '分地区户籍户数与人口情况', '级别3': '自然增长率', '级别4': '自然增长率', '级别5': '全市', '级别6': '全市', '2010': 12.03, '2011': 14.3, '2012': 10.88, '2013': 15.05, '2014': 17.84, '2015': 17.27, '2016': 9.04, '2017': 14.02, '2018': 1.47, '2019': 8.26},    {'编码': '10150', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '婚姻登记情况', '级别3': '准予结婚登记', '级别4': '结婚', '级别5': '全市', '级别6': '全市', '2010': 93612.0, '2011': 101907.0, '2012': 117345.0, '2013': 127280.0, '2014': 119843.0, '2015': 107098.0, '2016': 98203.0, '2017': 98590.0, '2018': 87555.0, '2019': 82394.0},    {'编码': '10160', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '婚姻登记情况', '级别3': '离婚', '级别4': '全市', '级别5': '全市', '级别6': '全市', '2010': 10261.0, '2011': 11101.0, '2012': 12820.0, '2013': 14269.0, '2014': 17802.0, '2015': 18952.0, '2016': 21889.0, '2017': 25186.0, '2018': 37349.0, '2019': 28688.0},    {'编码': '10170', '地域': '徐州', '级别1': '人口 劳动力', '级 别2': '按三次产业划分的年末从业人员及构成', '级别3': '年末从业人员', '级别4': '年末从业人员', '级别5': '年末从业人员', '级别6': '全市', '2010': 103.83, '2011': 157.24, '2012': 156.3, '2013': 154.91, '2014': 154.91, '2015': 155.62, '2016': 156.01, '2017': 156.82, '2018': 157.92, '2019': 160.07},    {'编码': '10180', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '按三次产业划分的年末从业人员及构成', '级别3': '年末从业人员', '级别4': '第一产业', '级别5': '第一产业', '级别6': '全市', '2010': 11.82, '2011': 54.28, '2012': 51.62, '2013': 48.86, '2014': 45.84, '2015': 42.61, '2016': 39.02, '2017': 33.34, '2018': 31.191, '2019': 27.7},     {'编码': '10190', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '按三次产业划分的年末从业人员及构成', '级别3': '年末从业人员', '级别4': '第二产业', '级别5': '第二产业', '级别6': '全市', '2010': 42.22, '2011': 38.83, '2012': 40.59, '2013': 41.72, '2014': 43.35, '2015': 44.81, '2016': 46.27, '2017': 48.89, '2018': 49.777, '2019': 52.04},    {'编码': '10200', '地域': '徐州', '级别1': '人口 劳动力', '级别2': '按三次产业划分的年末从业人员及构成', '级别3': '年末从业人员', '级别4': '第三产业', '级别5': 2017.0, '级别6': '全市', '2010': 49.79, '2011': 64.13, '2012': 64.09, '2013': 64.33, '2014': 65.72, '2015': 68.2, '2016': 70.72, '2017': 74.58, '2018': 76.952, '2019': 80.32}] 
# years = ['2010', '2011', '2012', '2013', '2014', '2015', '2016', '2017', '2018', '2019'] 
# description = "徐州数据"

def CFfunc(x, A, B, C, D, E):
    return A * x ** 4 + B * x ** 3 + C * x ** 2 + D * x + E

def forecast_(years, values):
    x = [i for i in range(len(years))]
    x_plot = [i for i in range(len(years) + 1)]
    years_add1 = np.append(years, str(int(years[-1]) + 1))
    for value in values:
        try:
            popt, _ = curve_fit(CFfunc, x, value, maxfev=50000)
            y_pred = CFfunc(np.array(x_plot), popt[0], popt[1], popt[2], popt[3], popt[4])
        except:
            y_pred = [0] * len(x_plot)
        plt.plot(years_add1, y_pred)
        plt.scatter(years, value)


def plot(datas, years, description):
    '''
    图片需保存在'graphs\\%s.png' % description
    :param datas: 导入文件中包含的数据，是一个字典列表[{'编码':'10020', '地域':'徐州', '级别1':'人口 劳动力', '级别2':'年末户籍户数、人口数',
                                                     '级别3':'总人口', '级别4':'男', '级别5':男, '级别6':'全市', '2010':436.69,
                                                     '2011':431.67, ... '2019':442.74},    {...},    ...]
    :param years: datas中包含的年份, 是一个str列表 ['2010', '2011', ...]
    :param description: 图片名字
    '''
    plt.cla()
    plt.figure()
    plt.rcParams['savefig.dpi'] = 235
    # 作为预测函数的y数据列表
    values = []
    for i in range(len(datas)):
        temp = np.array([])
        for year in years:
            try:
                temp = np.append(temp, float(datas[i][year]))
            except TypeError:
                temp = np.append(temp, 0)
        values.append(temp)
    values = np.array(values)
    results = forecast_(years, values)
    # plt.show()
    plt.title(description)
    plt.savefig('graphs\\%s.png' % description)


# plot(datas, years, description)